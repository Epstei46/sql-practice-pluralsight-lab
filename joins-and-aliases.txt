Challenge: Your First Inner Join
Lets write our first INNER JOIN given the data in the following tables.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Tasks:
(1) Join the Movies table with the Rooms table so that we only fetch movies that have an associated room.
(2) Let's get a little more specific, and only return the movie title, the id for the room, and number of seats in the theatre.
(3) Now, let's filter the results more by only showing theatres with more than 75 seats. Remember, the WHERE clause should go after the JOIN syntax.
(4) Finally, let's sort the result by seats in the theatre from most to least seats.

Answer:
SELECT Movies.title, Rooms.id, Rooms.seats From Movies
INNER JOIN Rooms ON Movies.id=Rooms.movie_id
WHERE Rooms.seats > 75 ORDER BY Rooms.seats DESC;

-----------------------------------------------------------------------------------------------------------

Challenge: Two Inner Joins
Let's build a query, step by step, that joins the Actors and the Movies tables.

--Actors
id	name
1	Vivien Leigh
2	Clark Gable
3	Olivia de Havilland

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Actors_Movies
actor_id	movie_id
1	    1
1	    2
2	    3
3	    2
3	    4

Tasks:
(1) First, join the Actors table with the Actors_Movies table so that only actors participating in movies are returned on the result.
(2) Next, create another INNER JOIN from the Actors_Movies table to the Movies table so that our result shows information about the movies.
(3) Great! Now change the query to only fetch actor names and movie titles.
(4) Lastly, let's sort this query by movie title, alphabetically.

Answer:
SELECT actors.name, movies.title FROM actors
INNER JOIN actors_movies ON actors.id=actors_movies.actor_id
INNER JOIN movies ON actors_movies.movie_id=movies.id
ORDER BY movies.title ASC;

-----------------------------------------------------------------------------------------------------------

Challenge: Column and Table Aliases
Modify the query shown in the editor to have better output and be shorter.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Given:
-- SELECT Movies.title, Rooms.id, Rooms.seats
-- FROM Movies
-- INNER JOIN Rooms
-- ON Movies.id = Rooms.movie_id
-- WHERE Rooms.seats > 75
-- ORDER BY Rooms.seats desc;

Tasks:
(1) First, change the query to output "Movie Title" instead of just title on the result.
(2) Next, change the id field to print "Theatre Number".
(3) Now, let's use table aliases to shorten the query. Alias Rooms to use "r" and Movies to "m".

Answer:
SELECT m.title "Movie Title", r.id AS "Theatre Number", r.seats
FROM Movies m
INNER JOIN Rooms r
ON m.id = r.movie_id
WHERE r.seats > 75
ORDER BY r.seats desc;

-----------------------------------------------------------------------------------------------------------

Challenge: Three Table Aliases
Modify the query shown in the editor to utilize aliases.

--Actors
id	name
1	Vivien Leigh
2	Clark Gable
3	Olivia de Havilland

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Actors_Movies
actor_id	movie_id
1	    1
1	    2
2	    3
3	    2
3	    4

Task:
(1) Shorten this query to use 3 different table aliases.

Answer:
SELECT a.name, m.title FROM Actors a
INNER JOIN Actors_Movies am ON a.id = am.actor_id
INNER JOIN Movies m ON am.movie_id = m.id
ORDER BY m.title;

-----------------------------------------------------------------------------------------------------------

Challenge: Your First Outer Join
Let's create a query that returns all movies with some additional data.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Tasks:
(1) First, create a query that returns all movies and also displays a movie's room if it's playing in a room. For this query, select everything (*).
(2) Now, let's select just the movie title and room id if it exists, and set a column alias for the room id to "Theatre Number".
(3) Lastly, it doesn't look like we've used table aliases with this query, which is usually a good practice. Why don't we do that now?

Answer:
SELECT m.title, r.id "Theatre Number" FROM movies m
LEFT OUTER JOIN rooms r ON m.id=r.movie_id;

-----------------------------------------------------------------------------------------------------------

Challenge: On the Other Hand
We need to modify this query shown in the editor.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Given:
-- SELECT m.title, r.id "Theatre Number"
-- FROM Movies m
-- LEFT OUTER JOIN Rooms r
-- ON m.id = r.movie_id;

Task:
(1) Let's change the query to return all of the rooms and only the movies with associated rooms.

Answer:
SELECT m.title, r.id "Theatre Number"
FROM Movies m
RIGHT OUTER JOIN Rooms r
ON m.id = r.movie_id;