Challenge: Our First Subquery
Let's write our first subquery.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Tasks:
(1) First, let's write a query that returns every movie_id from the Rooms table that has more than 75 seats.
(2) Next, turn this query into a subquery by wrapping it in parentheses. Then use the returned ids to find the matching movies and return their titles.

Answer:
SELECT title FROM movies WHERE id IN
(SELECT movie_id FROM rooms WHERE seats > 75);

-----------------------------------------------------------------------------------------------------------

Challenge: An Aggregate Subquery
Let's write an aggregate subquery.

--Rooms
id	seats	movie_id
1	40	2
2	100	1
3	100	NULL
4	150	3

Task:
(1) Write a subquery that returns the id of the rooms that have greater than the average number of seats.

Answer:
SELECT id FROM rooms WHERE seats >
    (SELECT AVG(seats) FROM rooms);

-----------------------------------------------------------------------------------------------------------

Challenge: Thinking Outer of the Box
It would be helpful if we knew if any movies were playing in the rooms returned by our previous query.

--Movies
id	title
1	Don Juan
2	The Lost World
3	Peter Pan
4	Robin Hood

--Rooms
id	seats	movie_id
1	50	    2
2	100	    1
3	100	    NULL
4	150	    3

Given:
-- SELECT id FROM Rooms
-- WHERE seats > (SELECT AVG(seats) FROM Rooms);

Tasks:
(1) Add a join to the query so we can find movies playing in our rooms. Remember, not all rooms will have movies. Also, we may need to prefix the id column with the correct table name.
(2) Let's also return the movie title in the result.
(3) Lastly, create table aliases for both Rooms and Movies.

Answer:
SELECT r.id AS "Rooms", m.title "Movies" FROM rooms r
LEFT OUTER JOIN movies m ON r.movie_id=m.id
WHERE r.seats > (SELECT AVG(seats) FROM Rooms);